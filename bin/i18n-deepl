#!/usr/bin/env node

import dotenv from 'dotenv';
import { program } from 'commander';
import { getSupportedLanguages, setAuthKey, translateToJSON } from '../src/i18n-deepl.js';
dotenv.config();

program
  .command('languages')
  .description('List DeepL’s supported languages.')
  .option('--auth-key <authKey>', 'The DeepL Auth Key.')
  .action(async (options) => {
      const authKey = options.authKey || process.env.DEEPL_AUTH;
      const languages = await getSupportedLanguages(authKey);
      console.log('DeepL’s Supported Languages:');
      languages.forEach(lang =>
        console.log(`${lang.language} - ${lang.name}`)
      );
  });

program
  .command('set-auth authKey')
  .description('Sets the DeepL Auth Key as environmental variable.')
  .action(async (authKey) => {
    await setAuthKey(authKey);
    return console.log('Success. DeepL Auth Key is now set.');
  });

program
  .command('translate')
  .description('Translate texts from a JSON file to the target language.')
  .arguments('<source> <target> <targetLang>')
  .option('--auth-key <authKey>', 'The DeepL Auth Key.')
  .option('--source-lang <sourceLang>', 'Source language for translation, such as "de".')
  .option('--options <options>', 'DeepL API options, given as object, i.E. --opts="{formality: \'less\'}."')
  .option('--source-sub <sourceSub>', 'Send only a sub-entry of the source JSON to DeepL API. ' +
    'I.E. --source-sub="translations.de]" will route to the nested entry \'translations\' and within it will send the entries of \'en\' to translation.')
  .option('--target-sub', 'Write the response from the translation API not to the root of the JSON file but to a sub-entry. ' +
    'I.E. --target-sub="[\'translations\', \'enUS\']" will insert the translation in {\'translations\': { \'enUS\': { ... }}.')
  .option('--dryRun, -dr', 'Perform a dry run and log it without making any changes to actual data.')
  .option('--log, -l', 'Log translation response to console.')
  .action(
    async (source, target, targetLang, options) => {

      //console.log(options.sourceSub);
      //console.log(options);

    try {
       await translateToJSON(
        options.authKey || process.env.DEEPL_AUTH,
        source,
        target,
        targetLang,
         options.sourceLang || null,
         options.sourceSub,
         options.options || {}
      );
      console.log('Translation complete.')
    } catch (error) {
      console.error('Error translating texts:', error);
    }
  });

program.parse(process.argv);