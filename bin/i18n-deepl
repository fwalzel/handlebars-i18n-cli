#!/usr/bin/env node

import { program } from 'commander';
import { getSupportedLanguages, setAuthKey, translateJSON } from '../src/i18n-deepl.js';

program
  .command('languages')
  .description('List supported languages')
  .action(async () => {
    const options = program.opts();
    try {
      const languages = await getSupportedLanguages(options.authKey);
      console.log('Supported Languages:');
      languages.forEach(lang => console.log(`${lang.language} - ${lang.name}`));
    } catch (error) {
      console.error('Error fetching supported languages:', error);
    }
  });

program
  .command('set-auth authKey')
  .description('Sets the DeepL Auth key as environmental variable for node.')
  .action(async (authKey) => {
    await setAuthKey(authKey);
    return console.log('Success. DeepL Auth key is set.');
  });

program
  .command('translate')
  .description('Translate texts to the target language')
  .arguments('<source> <target>')
  .option('--auth-key <authKey>', 'DeepL Auth key')
  .option('-dr, --dryRun', 'Perform a dry run and log it without making any changes to data')
  .option('--src-lang <sourceLang>', 'Source language for translation, such as "en"')
  .option('--target-lang <targetLang>', 'Target language for translation, such as "zh"')
  .option('--opts <options>', 'DeepL API options, given as object, i.E. --opts="{formality: \'less\'}"')
  .action(async (source, target) => {
    const options = program.opts();
    if (!texts.length) {
      console.error('Please provide texts to translate.');
      process.exit(1);
    }

    if (!options.targetLang) {
      console.error('Please provide a target language using --target-lang.');
      process.exit(1);
    }

    try {
       await translateJSON(
        options.authKey,
        source,
        target,
        options.sourceLang,
        options.targetLang,
        options.options,
      );
      console.log('success.')
    } catch (error) {
      console.error('Error translating texts:', error);
    }
  });

program.parse(process.argv);